@page "/register"
@using System.Text.RegularExpressions;
@using PeerReviewWebsite.Classes.Data.Account
@inject MyStateContainer myStateContainer
@inject NavigationManager UriHelper
@inherits OwningComponentBase<AccountService>

<title>Register</title>

<body>
    <h1>Registration Form</h1>
    <form action="">
        <div>
            <h2>Create a New Account</h2>
        </div>

        <div>
            <!-- First Name -->
            <input type="text" placeholder="First Name" id="firstname" @bind-value=@firstName />
            <br />
            <br />

            <!-- Last Name -->
            <input type="text" placeholder="Last Name" id="lastname" @bind-value=@lastName required />
            <br />
            <br />

            <!-- Email -->
            <input type="email" placeholder="Email" id="email" @bind-value=@email required />
            <br />
            <br />

            <!-- Password -->
            <input type="password" placeholder="Password" id="password" @bind-value=@password pattern="[A-Za-z]{3}" required />
            <br />
            <br />

            <!-- Confirm Password -->
            <input type="password" placeholder="Confirm Password" id="conpassword" @bind-value=@conPassword required />
            <br />
            <br />

            <!--Password Error Message: only appears when the password input does not match-->
            <label id="pswordlabel" for="password" hidden="@(!pswrdMessage)">ERROR: Passwords didn't match</label>
            <br />

            <!--Email Error Message: only appears when email input does not have a valid format-->
            <label id="emaillabel" for="email" hidden="@(!emailMessage)">ERROR: Invalid Email</label>
            <br />
            <br />

            <button type="button" class="btn btn-primary" @onclick="RegisterUser">Create Account</button>
            <br />
            <p>Already have an account?  <NavLink class="nav-link" href="/">Login</NavLink></p>
        </div>
    </form>

</body>

@code {

    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private string password = "";
    private string conPassword = "";
    bool pswrdMessage { get; set; } = false;
    bool emailMessage { get; set; } = false;

    /// <summary>
    /// Checking that input is being properly grabbed
    /// </summary>
    private void PrintInput()
    {
        Console.WriteLine("First name entered was " + firstName);
        Console.WriteLine("Last name entered was " + lastName);
        Console.WriteLine("Email entered was " + email);
        Console.WriteLine("Password entered was " + password);
        Console.WriteLine("Confirm Password was " + conPassword);
    }

    /// <summary>
    /// Registers the user to the database
    /// </summary>
    private async Task RegisterUser()
    {
        pswrdMessage = false;
        emailMessage = false;
        if (!ConfirmPassword())
        {
            pswrdMessage = true;
            return;
        }
        else if (!ValidateEmail())
        {
            emailMessage = true;
            return;
        }

        User user = await Service.CreateUserAsync(new User
            {
                FirstName = firstName,
                LastName = lastName,
                Email = email,
                Password = password
            });
        myStateContainer.SetValue(user);

        // Test creating and adding roles
        Role role1 = await Service.CreateRoleAsync(new Role {
            Name = "Documents Role",
            Permissions = Permission.UploadDocument | Permission.UpdateDocument | Permission.UpdateDocument
        });
        Role role2 = await Service.CreateRoleAsync(new Role {
            Name = "Comments Role",
            Permissions = Permission.Comment | Permission.Respond | Permission.ResolveComment 
        });
        await Service.AddRoleToUserAsync(user, role1);
        await Service.AddRoleToUserAsync(user, role1);
        await Service.AddRoleToUserAsync(user, role2);

        // Navigate to the new profile page
        PrintInput();
        UriHelper.NavigateTo($"/profile");
    }

    /// <summary>
    /// Check that the Passwords match
    /// </summary>
    /// <returns>True if matching, false otherwise</returns>
    private bool ConfirmPassword()
    {
        if (String.Equals(password, conPassword)) {
            return true;
        } else {
            Console.WriteLine("Passwords did not match");
            return false;
        }
    }

    /// <summary>
    ///  Check that email input has valid email format
    /// </summary>
    private bool ValidateEmail()
    {
        string emailFormat = @"^([a-zA-Z])+[^@\s]+@([a-zA-Z])+\.[^@\s]+$";

        if (Regex.IsMatch(email, emailFormat))
        {
            return true;
        }
        else  
        {
            Console.WriteLine("Invalid Email was entered");
            return false;
        }
    }

}
