@page "/viewer"

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.DependencyInjection
@using PeerReviewWebsite.Classes.Data
@using PeerReviewWebsite.Classes.Data.Account
@using PeerReviewWebsite.Classes.Data.Review
@using System.IO
@using System.Diagnostics
@inject MyStateContainer state
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper
@inherits OwningComponentBase

<link rel="stylesheet" href="lib/pdfjs/web/viewer.css" />
<script src="lib/pdfjs/build/pdf.mjs" type="module"></script>
<script type="text/javascript">
    function renderDoc(Data, scale) {
        // atob() is used to convert base64 encoded PDF to binary-like data.
        // (See also https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/
        // Base64_encoding_and_decoding.)
        var pdfData = atob(Data);

        // Loaded via <script> tag, create shortcut to access PDF.js exports.
        var { pdfjsLib } = globalThis;

        // The workerSrc property shall be specified.
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'lib/pdfjs/build/pdf.worker.mjs';

        var pdfDoc = null,
            pagesDiv = document.getElementById('pagesDiv'),
            root = document.querySelector(':root');

        root.style.setProperty('--page-margin', '0 0');
        root.style.setProperty('--page-border', '0');

        function renderPage(num) {
            // Using promise to fetch the page
            pdfDoc.getPage(num).then(function (page) {
                var canvas, textLayer;

                // find old page or make a new one
                var pageDiv = document.querySelector(`.page[pageNum='${num}']`);
                if (!pageDiv) {
                    pageDiv = document.createElement('div');
                    pageDiv.setAttribute("pageNum", num);
                    pageDiv.classList.add('page');
                    pagesDiv.appendChild(pageDiv);

                    // add canvas for the pdf rendering
                    canvas = document.createElement('canvas');
                    canvas.id = `pdfCanvas${num}`;
                    pageDiv.appendChild(canvas);

                    // add div for the text selection layer
                    textLayer = document.createElement('div');
                    textLayer.id = `textLayer${num}`;
                    textLayer.classList.add('textLayer');
                    pageDiv.appendChild(textLayer);
                }
                else {
                    canvas = pageDiv.childNodes.item(`pdfCanvas${num}`);
                    textLayer = pageDiv.childNodes.item(`textLayer${num}`);
                }

                // set scale factor
                pageDiv.style.setProperty('--scale-factor', scale);

                var viewport = page.getViewport({ scale: scale });

                // make a new canvas for each page
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                // set each page div to the size of the page
                pageDiv.style.width = canvas.width + 'px';
                pageDiv.style.height = canvas.height + 'px';
                // set size of pdfViewer to first page dimensions
                if (num == 1) {
                    pagesDiv.style.width = canvas.width + 'px';
                    pagesDiv.style.height = canvas.height + 'px';
                }

                var ctx = canvas.getContext('2d');

                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);

                // Wait for rendering to finish
                renderTask.promise.then(function () {
                    page.getTextContent().then(function (textContent) {
                        pdfjsLib.renderTextLayer({
                            textContentSource: textContent,
                            container: textLayer,
                            viewport: viewport,
                            textDivs: []
                        });
                    });

                    if (num < pdfDoc.numPages)
                        renderPage(num + 1);
                });
            });

            // Update page counters
            document.getElementById('page_num').textContent = num;
        }

        /**
            * Asynchronously downloads PDF.
            */
        pdfjsLib.getDocument({ data: pdfData }).promise.then(function (pdfDoc_) {
            pdfDoc = pdfDoc_;
            document.getElementById('page_count').textContent = pdfDoc.numPages;

            // Initial/first page rendering
            renderPage(1);
        });
    }
</script>

<PageTitle>Viewer</PageTitle>

<body>

    <NavigationBar activePage=NavigationBar.Page.Explore showModeratorPage=isModerator />
    <br /><br />

    <div class="column">
        <div>
            <button @onclick=ZoomIn>Zoom in</button>
            <button @onclick=ZoomOut>Zoom out</button>
            <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
        </div>
        <div id="pagesDiv" class="pdfViewer"></div>
    </div>

    <div class="column">
        <form @onsubmit=UploadComment>

            <p>Comment:</p>
            <textarea placeholder="Description" rows="5" cols="80" @bind=commentText />
            <button class="submit" type="submit">Post Comment</button>

        </form>

        @foreach((User user, Comment comment) in comments) {
            <div class="comment">
                <p>@user.FirstName @user.LastName</p>
                <p>@comment.Content</p>
            </div>
        }
    </div>

</body>

<Footer />


@code {


    private AccountService AccountService { get; set; }
    private ReviewService ReviewService { get; set; }

    private double scale = 1;
    private string commentText = "";
    private List<(User, Comment)> comments = new();

    private bool isModerator;
    protected override async Task OnInitializedAsync()
    {   
        AccountService = ScopedServices.GetRequiredService<AccountService>();
        ReviewService = ScopedServices.GetRequiredService<ReviewService>();

        isModerator = await AccountService.UserIsModerator(state.User);

        await PopulateComments();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
            await RenderDoc();
    }

    private async Task RenderDoc()
    {
        byte[] data = state.CurrentDoc.Content;
        string base64 = Convert.ToBase64String(data);
        await JSRuntime.InvokeVoidAsync("renderDoc", base64, scale);
    }

    private async Task ZoomIn() {
        scale += .1;
        await RenderDoc();
    }

    private async Task ZoomOut() {
        scale -= .1;
        await RenderDoc();
    }

    private async Task UploadComment() {
        Comment newComment = await ReviewService.CreateCommentAsync(new Comment {
            Content = commentText,
        });

        (state.User, state.CurrentDoc) = await AccountService.AddCommentToDocumentAsync(state.User, state.CurrentDoc, newComment);

        commentText = "";
        await PopulateComments();
    }

    private async Task PopulateComments() {
        comments.Clear();
        foreach (int id in state.CurrentDoc.Comments) {
            Comment c = await ReviewService.GetCommentAsync(id);
            User u = await AccountService.GetUserAsync(c.Author);
            comments.Add((u, c));
        }

        StateHasChanged();
    }
}
