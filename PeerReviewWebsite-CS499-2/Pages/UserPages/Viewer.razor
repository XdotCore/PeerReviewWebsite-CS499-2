@page "/viewer"

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.DependencyInjection
@using PeerReviewWebsite.Classes.Data
@using PeerReviewWebsite.Classes.Data.Account
@using PeerReviewWebsite.Classes.Data.Review
@using System.IO
@using System.Diagnostics
@inject MyStateContainer state
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper
@inherits OwningComponentBase

<script src="lib/pdfjs/build/pdf.mjs" type="module"></script>
<script type="text/javascript">
    function renderDoc(Data) {
        // atob() is used to convert base64 encoded PDF to binary-like data.
        // (See also https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/
        // Base64_encoding_and_decoding.)
        var pdfData = atob(Data);

        // Loaded via <script> tag, create shortcut to access PDF.js exports.
        var { pdfjsLib } = globalThis;

        // The workerSrc property shall be specified.
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'lib/pdfjs/build/pdf.worker.mjs';

        var pdfDoc = null,
            scale = 1.5,
            pagesDiv = document.getElementById('pagesDiv')

        function renderPage(num) {
            // Using promise to fetch the page
            pdfDoc.getPage(num).then(function (page) {
                var viewport = page.getViewport({ scale: scale });

                // make a new canvas for each page
                var canvas = document.createElement('canvas');
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                pagesDiv.appendChild(canvas);

                var ctx = canvas.getContext('2d');

                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);

                // Wait for rendering to finish
                renderTask.promise.then(function () {
                    if (num < pdfDoc.numPages)
                        renderPage(num + 1);
                });
            });

            // Update page counters
            document.getElementById('page_num').textContent = num;
        }

        /**
            * Asynchronously downloads PDF.
            */
        pdfjsLib.getDocument({ data: pdfData }).promise.then(function (pdfDoc_) {
            pdfDoc = pdfDoc_;
            document.getElementById('page_count').textContent = pdfDoc.numPages;

            // Initial/first page rendering
            renderPage(1);
        });
    }
</script>

<PageTitle>Viewer</PageTitle>

<body>

    <NavigationBar activePage=NavigationBar.Page.Explore showModeratorPage=isModerator />
    <br /><br />

    <div>
        <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
    </div>
    <div id="pagesDiv"></div>

</body>

<Footer />


@code {


    private AccountService AccountService { get; set; }
    private ReviewService ReviewService { get; set; }

    private bool isModerator;
    protected override async Task OnInitializedAsync()
    {   
        AccountService = ScopedServices.GetRequiredService<AccountService>();
        ReviewService = ScopedServices.GetRequiredService<ReviewService>();

        isModerator = await AccountService.UserIsModerator(state.User);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
            await RenderDoc();
    }

    private async Task RenderDoc()
    {
        byte[] data = state.CurrentDoc.Content;
        string base64 = Convert.ToBase64String(data);
        await JSRuntime.InvokeVoidAsync("renderDoc", base64);
    }
}
